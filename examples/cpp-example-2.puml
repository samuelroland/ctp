@startuml

' STATIC
' NOTE: This is an incomplete class diagram of a C++ codebase as a demo: https://github.com/HEIGVD-PRG1-F-2022/lab06-lastrobotstanding-roboto/
' Generated by CTP - https://github.com/samuelroland/ctp

' Style
hide empty members
hide circle
skinparam classAttributeIconSize 0
scale 2
title LastRobotsStanding game

' Additions
Game "1"-->"*" RobotState: manage >
Game "1"-->"*" Bonus: offer >
RobotState "1"*--"1" Robot: manage info >
Game -[hidden]- Roboto
RobotPack -[hidden]- UpdatesPack

Robot <|-- Roboto

' REMOVE
' - robots: std::vector<RobotState>
' - boni: std::vector<Bonus>
' ENDSTATIC





' Objects

class BetterR {
	- chooseAction(pack: const UpdatesPack&): std::string
	+ BetterR()
	+ action(updates: std::vector<std::string>): std::string
	+ name_const(): std::string
}

class Game {
	
	
	- nbRobots: unsigned
	+ size: size_t
	+ Game(nbRobots: unsigned)
	+ start(robotPacks: std::vector<RobotPack>, displayMode: bool): std::string
	+ generateRobots(robotPacks: const std::vector<RobotPack>&): void
	+ getLivingRobots(): std::vector<RobotState*>
	+ printBoard(iterationCount: unsigned): void
	+ buildDynamicBoard(): std::vector<std::vector<Display::DString>>
	+ printStats(iterationCount: unsigned): void
	+ {static} printStat(state: const RobotState&, index: unsigned): void
}

class RandomRoboto {
	- chooseAction(pack: const UpdatesPack&): std::string
	+ RandomRoboto()
	+ action(updates: std::vector<std::string>): std::string
	+ name_const(): std::string
}

class Roboto {
	- width: size_t
	- height: size_t
	- energy: unsigned
	- power: unsigned
	- iteration: unsigned
	- minEnergyLevel: unsigned
	- chooseAction(pack: const UpdatesPack&): std::string
	- {static} escapeDirection(robotsDirections: const std::vector<Direction>&): Direction
	+ Roboto()
	+ setConfig(w: size_t, h: size_t, e: unsigned, p: unsigned): void
	+ receiveUpdates(updates: const std::vector<std::string>&): UpdatesPack
	+ action(updates: std::vector<std::string>): std::string
	+ name_const(): std::string
}

class RobotPack {
	+ className: std::string
	+ number: int
}

class UpdatesPack {
	+ boardUpdate: Message
	+ bonusUpdates: std::vector<Message>
	+ damageUpdates: std::vector<Message>
}




' Inheritance relationships

Roboto <|-- BetterR

Roboto <|-- RandomRoboto







' Nested objects



' Free functions

note "Free functions \n\n\
getRandomNumber(min: int, max: int): int\
" as free_functions


@enduml
